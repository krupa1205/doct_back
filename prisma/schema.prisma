// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  name          String?
  phone         String?
  dateOfBirth   DateTime? @map("date_of_birth")
  gender        String?
  address       String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true) @map("is_active")
  emailVerified Boolean   @default(false) @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  doctor        Doctor?
  bookings      Booking[]
  messages      Message[]
  sessions      Session[]

  @@map("users")
}

model Doctor {
  id              String    @id @default(cuid())
  userId          String    @unique @map("user_id")
  licenseNumber   String    @unique @map("license_number")
  specialty       String
  experience      Int       @default(0)
  education       String?
  bio             String?
  image           String?   // Doctor's profile image URL
  consultationFee Float     @map("consultation_fee")
  rating          Float     @default(0)
  totalReviews    Int       @default(0) @map("total_reviews")
  isAvailable     Boolean   @default(true) @map("is_available")
  isVerified      Boolean   @default(false) @map("is_verified")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  slots       Slot[]
  sessions    Session[]

  @@map("doctors")
}

model Specialty {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("specialties")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String        @map("user_id")
  doctorId      String        @map("doctor_id")
  slotId        String?       @map("slot_id")
  appointmentDate DateTime    @map("appointment_date")
  status        BookingStatus @default(PENDING)
  consultationType String     @map("consultation_type") // ONLINE, OFFLINE
  symptoms      String?
  notes         String?
  prescription  String?
  totalAmount   Float         @map("total_amount")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentId     String?       @map("payment_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  slot   Slot?  @relation(fields: [slotId], references: [id])

  @@map("bookings")
}

model Slot {
  id          String    @id @default(cuid())
  doctorId    String    @map("doctor_id")
  startTime   DateTime  @map("start_time")
  endTime     DateTime  @map("end_time")
  isAvailable Boolean   @default(true) @map("is_available")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  doctor   Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("slots")
}

model Message {
  id        String      @id @default(cuid())
  sessionId String      @map("session_id")
  senderId  String      @map("sender_id")
  content   String
  type      MessageType @default(TEXT)
  isRead    Boolean     @default(false) @map("is_read")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sender  User    @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Session {
  id        String        @id @default(cuid())
  userId    String        @map("user_id")
  doctorId  String        @map("doctor_id")
  bookingId String?       @unique @map("booking_id")
  status    SessionStatus @default(ACTIVE)
  startedAt DateTime      @default(now()) @map("started_at")
  endedAt   DateTime?     @map("ended_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor   Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("sessions")
}

// Enums
enum UserRole {
  USER
  DOCTOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  PRESCRIPTION
}

enum SessionStatus {
  ACTIVE
  ENDED
  CANCELLED
}
